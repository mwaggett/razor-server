%global p_vendor       pe
%global _name          razor-server
%global realversion    <%= @version %>
%global rpmversion     <%= @rpmversion %>
%global _service_name  pe-razor

%if 0%{?p_vendor:1}
    %global name_prefix      %{p_vendor}-

    # Override the _prefix last, so we can get the _real_* locations.
    %{!?_orig_prefix:     %global _orig_prefix     %{_prefix}}
    %{!?_real_initrddir:  %global _real_initrddir  %{_initrddir}}
    %{!?_real_sysconfdir: %global _real_sysconfdir %{_sysconfdir}}
    %global               _initrddir  %{_real_initrddir}
    %global               _sysconfdir %{_real_sysconfdir}/puppetlabs
    %global               _prefix     /opt/puppet
    %global               _datadir    %{_prefix}/share
    %global               _mandir     %{_datadir}/man
    %global               _bindir     %{_prefix}/bin
%endif

%global _with_systemd  0
%global _with_sysvinit 0

# EL > 7 and SLES >= 12 use systemd
%if 0%{?rhel} >= 7
%global _with_systemd  1
%global _rhel_systemd  1
%endif

%if 0%{?suse_version} >= 1315
%global _with_systemd  1
%global _sles_systemd  1
%endif

%if 0%{?rhel} && 0%{?rhel} < 7
%global _with_sysvinit 1
%global _old_el        1
%endif

%if 0%{?suse_version} && 0%{?suse_version} <= 1110
%global _with_sysvinit 1
%global _old_sles      1
%endif


%define _java_home  JAVA_HOME=/opt/puppet/lib/jvm/pe-java/jre
%define _javacmd    JAVACMD=/opt/puppet/bin/java
%define _jruby      %{_java_home} %{_javacmd} %{_datadir}/torquebox/jruby/bin/jruby -S
%define _bundle     %{_jruby} bundle
%define _rake       %{_jruby} rake

Summary:        Razor is an advanced provisioning application
Name:           %{?name_prefix}%{_name}
Version:        %{rpmversion}
Release:        <%= @rpmrelease -%>.pe%{?dist}
Vendor:         Puppet Labs
License:        PL Commercial
Group:          System Environment/Base
URL:            http://www.puppetlabs.com/puppet/related-projects/%{name}
# Note this     URL will only be valid at official tags from Puppet Labs
Source0:        http://puppetlabs.com/downloads/%{name}/%{name}-%{realversion}.tar.gz
BuildArch:      noarch
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)
AutoProv:       0

Requires:       %{?name_prefix}razor-libs
BuildRequires:  %{?name_prefix}razor-libs
%if 0%{?_rhel_systemd}
Requires(post):   systemd
Requires(preun):  systemd
Requires(postun): systemd
BuildRequires:    systemd
%endif

%if 0%{?_sles_systemd}
BuildRequires:    systemd-rpm-macros
Requires:         %{?systemd_requires}
%endif

Requires:         libarchive-devel

%description
Razor is an advanced provisioning application which can deploy both bare-metal
and virtual systems. It's aimed at solving the problem of how to bring new
metal into a state where your existing DevOps/configuration management
workflows can take it over.

Newly added machines in a Razor deployment will PXE-boot from a special Razor
Microkernel image, then check in, provide Razor with inventory information, and
wait for further instructions. Razor will consult user-created policy rules to
choose which preconfigured model to apply to a new node, which will begin to
follow the model's directions, giving feedback to Razor as it completes various
steps. Models can include steps for handoff to a DevOps system such as Puppet
or to any other system capable of controlling the node (such as a vCenter
server taking possession of ESX systems).

%prep
%setup -q  -n %{name}-%{realversion}

%build

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{_datadir}/razor-server
mkdir -p %{buildroot}%{_datadir}/razor-server/bin
mkdir -p %{buildroot}%{_prefix}/var/razor
mkdir -p %{buildroot}%{_initrddir}
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}%{_sysconfdir}/razor
mkdir -p %{buildroot}/etc/sysconfig
mkdir -p %{buildroot}/var/log/%{name}

# Install the init script and sysconfig file
%if 0%{?_with_systemd}
install -d -m0755  %{buildroot}%{_unitdir}
install -m0644 ext/redhat/%{name}.service %{buildroot}%{_unitdir}/
install -d -m0755 %{buildroot}%{_datadir}/%{_name}
install -m0644 ext/redhat/%{name}.env %{buildroot}%{_datadir}/%{_name}/
install -d -m0755 %{buildroot}/run/%{name}
install -d %{buildroot}%{_tmpfilesdir}
install -m0644 ext/redhat/%{name}-tmpfiles.conf %{buildroot}%{_tmpfilesdir}/%{name}.conf
%else
cp -pr  ext/redhat/pe-razor-server.init %{buildroot}%{_initrddir}/pe-razor-server
%endif
cp -pr  ext/redhat/pe-razor-server.sysconfig %{buildroot}/etc/sysconfig/pe-razor-server

# Clean up packaging artifacts to prevent weird dependencies
rm -rf ext/debian ext/redhat ext/build_defaults.yaml ext/packaging.rake ext/project_data.yaml

# Bundle me if you want to live
# Install the production gemset
%{_bundle} install --shebang /opt/puppet/bin/jruby --local --deployment --path $RPM_BUILD_ROOT%{_datadir}/razor-server/vendor/bundle --without development test doc
# Finally, we can remove the cached gems since we're not using them for install again
rm -rf vendor/bundle/jruby/1.9/cache
# Since we don't want dashboard's BUNDLE_PATH to be set to /tmp/builddir/..., we have to set it manually here
%{_bundle} config --local PATH %{_datadir}/razor-server/vendor/bundle

# Copy the other stuff.
cp -pr  .bundle brokers db hooks lib app.rb config.ru Gemfile Gemfile.lock \
        jars LICENSE NEWS.md Rakefile README.md tasks torquebox.rb \
        %{buildroot}%{_datadir}/razor-server

cp -p   bin/razor-admin %{buildroot}%{_datadir}/razor-server/bin
cp -p   bin/razor-admin-wrapper %{buildroot}%{_bindir}/razor-admin
cp -p   config.yaml.sample %{buildroot}%{_sysconfdir}/razor
cp -pr  locales %{buildroot}%{_datadir}/razor-server/locales

# Munge the shebang on razor-admin to point to the correct jruby instance for PE
sed -i 's,#! /usr/bin/env jruby,#!/opt/puppet/bin/jruby,g' %{buildroot}%{_datadir}/razor-server/bin/razor-admin

%pre
%if 0%{?_sles_systemd}
%service_add_pre %{name}.service
%endif
if [ $1 -gt 1 ]; then
  (
    cd %{_datadir}/razor-server;
    /opt/puppet/sbin/torquebox undeploy > /dev/null 2>&1 ||:
  )
fi

%post
%if 0%{?_rhel_systemd}
%systemd_post %{name}.service
%endif

%if 0%{?_sles_systemd}
%service_add_post %{name}.service
%endif

%if 0%{?_with_sysvinit}
/sbin/chkconfig --add %{name} || :
%endif

if [ $1 -gt 1 ]; then
  if [ -f /etc/puppetlabs/razor/config.yaml ]; then
    /opt/puppet/bin/razor-admin migrate-database > /dev/null 2>&1 ||:
  fi
fi
  (
    cd %{_datadir}/razor-server;
    /opt/puppet/sbin/torquebox deploy > /dev/null 2>&1 ||:
  )

%preun
%if 0%{?_rhel_systemd}
%systemd_preun %{name}.service
%endif

%if 0%{?_sles_systemd}
%service_del_preun %{name}.service
%endif

%if 0%{?_with_sysvinit}
if [ $1 -eq 0 ] ; then
  /sbin/service %{name} stop > /dev/null 2>&1 || :
  /sbin/chkconfig --del %{name} || :
fi
%endif

if [ $1 -eq 0 ] ; then
  (
    cd %{_datadir}/razor-server;
    /opt/puppet/sbin/torquebox undeploy > /dev/null 2>&1 ||:
  )
fi

%postun
%if 0%{?_rhel_systemd}
%systemd_postun_with_restart %{name}.service
%endif

%if 0%{?_sles_systemd}
%service_del_postun %{name}.service
%endif

%if 0%{?_with_sysvinit}
if [ $1 -ge 1 ]; then
  /sbin/service %{name} reload >/dev/null 2>&1 || :
fi
%endif

%clean
rm -rf %{buildroot}

%files
%defattr(-,root,root,-)
%{_datadir}/razor-server
%{_bindir}/razor-admin
%dir %{_sysconfdir}/razor
%{_sysconfdir}/razor/config.yaml.sample
%attr(-,%{_service_name},%{_service_name}) %dir %{_prefix}/var/razor
%attr(-,%{_service_name},%{_service_name}) %dir /var/log/%{name}
%attr(-,%{_service_name},%{_service_name}) %{_datadir}/razor-server/config.ru
%if 0%{?_with_systemd}
%{_unitdir}/%{name}.service
%{_datadir}/%{_name}/%{name}.env
%attr(-,%{_service_name},%{_service_name}) %dir /run/%{name}/
%{_tmpfilesdir}/%{name}.conf
%else
%{_initrddir}/%{name}
%endif
/etc/sysconfig/%{name}
%doc doc README.md

%changelog
* <%= Time.now.strftime("%a %b %d %Y") %> Puppet Labs Release <info@puppetlabs.com> -  <%= @rpmversion %>-<%= @rpmrelease %>.pe
- Build for <%= @version %>
